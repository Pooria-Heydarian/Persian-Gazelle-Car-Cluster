/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/cluster_screen/ClusterViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ClusterViewBase::ClusterViewBase() :
    set_Speed_Gauge_0EndedCallback(this, &ClusterViewBase::set_Speed_Gauge_0EndedCallbackHandler),
    change_speed_Test_0EndedCallback(this, &ClusterViewBase::change_speed_Test_0EndedCallbackHandler),
    update_power_value_0EndedCallback(this, &ClusterViewBase::update_power_value_0EndedCallbackHandler),
    update_power_gauge_0EndedCallback(this, &ClusterViewBase::update_power_gauge_0EndedCallbackHandler),
    wAITCounter(0),
    wait2Counter(0),
    wait_3Counter(0),
    wAIT_NORMALCounter(0),
    wAIT_ECOCounter(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    Background.setXY(0, 2);
    Background.setBitmap(touchgfx::Bitmap(BITMAP_TRANSPARENCY_800_480_ID));
    add(Background);

    Neon_Green.setXY(0, 0);
    Neon_Green.setBitmap(touchgfx::Bitmap(BITMAP_BACK_ID));
    add(Neon_Green);

    red.setXY(0, 0);
    red.setBitmap(touchgfx::Bitmap(BITMAP_RED_ID));
    add(red);

    Speed_Gauge.setBackground(touchgfx::Bitmap(BITMAP_BACK_L_150_ID));
    Speed_Gauge.setPosition(31, 134, 150, 213);
    Speed_Gauge.setCenter(100, 100);
    Speed_Gauge.setStartEndAngle(-210.0f, 30.4f);
    Speed_Gauge.setRange(0, 100);
    Speed_Gauge.setValue(50);
    Speed_Gauge.setNeedle(BITMAP_TRANSPARENCY500_ID, 0, 0);
    Speed_Gauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    Speed_Gauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    Speed_Gauge.setArcVisible();
    Speed_GaugePainter.setBitmap(touchgfx::Bitmap(BITMAP_ARC_L_150_ID));
    Speed_Gauge.getArc().setPainter(Speed_GaugePainter);
    Speed_Gauge.getArc().setRadius(100);
    Speed_Gauge.getArc().setLineWidth(400);
    Speed_Gauge.getArc().setCapPrecision(180);
    Speed_Gauge.setArcPosition(0, 0, 150.0f, 213.3f);
    add(Speed_Gauge);

    Speed_value.setXY(43, 217);
    Speed_value.setProgressIndicatorPosition(24, -9, 120, 120);
    Speed_value.setRange(0, 100);
    Speed_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Speed_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SX8G));
    Speed_value.setBackground(touchgfx::Bitmap(BITMAP_TRANSPARENCY500_ID));
    Speed_value.setValue(50);
    add(Speed_value);

    KM.setXY(119, 267);
    KM.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    KM.setLinespacing(0);
    KM.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LW7V));
    KM.setAlpha(134);
    add(KM);

    Power_guage.setBackground(touchgfx::Bitmap(BITMAP_BACK_R_150_ID));
    Power_guage.setPosition(614, 134, 150, 213);
    Power_guage.setCenter(100, 100);
    Power_guage.setStartEndAngle(235.7f, -50.0f);
    Power_guage.setRange(0, 100);
    Power_guage.setValue(50);
    Power_guage.setNeedle(BITMAP_TRANSPARENCY500_ID, 7, 67);
    Power_guage.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    Power_guage.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    Power_guage.setArcVisible();
    Power_guagePainter.setBitmap(touchgfx::Bitmap(BITMAP_ACR_R_150_ID));
    Power_guage.getArc().setPainter(Power_guagePainter);
    Power_guage.getArc().setRadius(100);
    Power_guage.getArc().setLineWidth(400);
    Power_guage.getArc().setCapPrecision(180);
    add(Power_guage);

    Power_value.setXY(589, 217);
    Power_value.setProgressIndicatorPosition(24, -9, 120, 120);
    Power_value.setRange(0, 100);
    Power_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Power_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TMY4));
    Power_value.setBackground(touchgfx::Bitmap(BITMAP_TRANSPARENCY500_ID));
    Power_value.setValue(50);
    add(Power_value);

    KW.setXY(665, 267);
    KW.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    KW.setLinespacing(0);
    KW.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M3ZT));
    KW.setAlpha(134);
    add(KW);

    lines.setXY(300, 170);
    lines.setBitmaps(BITMAP_LINE1_ID, BITMAP_LINE2_ID);
    lines.setUpdateTicksInterval(9);
    lines.startAnimation(true, true, true);
    add(lines);

    car.setXY(300, 160);
    car.setBitmap(touchgfx::Bitmap(BITMAP_CAR_ID));
    add(car);

    high_light.setXY(115, 98);
    high_light.setBitmaps(BITMAP_CAR_IGHT_1_ID, BITMAP_CAR_LIGHT_2_ID);
    high_light.setUpdateTicksInterval(48);
    high_light.startAnimation(false, true, true);
    add(high_light);

    high_light_1.setXY(72, 98);
    high_light_1.setBitmaps(BITMAP_LIGHT_ID, BITMAP_LIGHT1_ID);
    high_light_1.setUpdateTicksInterval(48);
    high_light_1.startAnimation(false, true, true);
    add(high_light_1);

    high_light_1_1.setXY(156, 98);
    high_light_1_1.setBitmaps(BITMAP_SEATBELT_ID, BITMAP_SEATBELT1_ID);
    high_light_1_1.setUpdateTicksInterval(48);
    high_light_1_1.startAnimation(false, true, true);
    add(high_light_1_1);

    high_light_1_1_1.setXY(193, 98);
    high_light_1_1_1.setBitmaps(BITMAP_LEFT_ID, BITMAP_LEFT1_ID);
    high_light_1_1_1.setUpdateTicksInterval(48);
    high_light_1_1_1.startAnimation(false, true, true);
    add(high_light_1_1_1);

    high_light_1_1_1_1.setXY(703, 98);
    high_light_1_1_1_1.setBitmaps(BITMAP_BATTERY_ID, BITMAP_BATTERY1_ID);
    high_light_1_1_1_1.setUpdateTicksInterval(48);
    high_light_1_1_1_1.startAnimation(false, true, true);
    add(high_light_1_1_1_1);

    high_light_1_1_2.setXY(665, 98);
    high_light_1_1_2.setBitmaps(BITMAP_HAND_BREAK_ID, BITMAP_HAND_BREAK1_ID);
    high_light_1_1_2.setUpdateTicksInterval(48);
    high_light_1_1_2.startAnimation(false, true, true);
    add(high_light_1_1_2);

    high_light_1_2.setXY(627, 98);
    high_light_1_2.setBitmaps(BITMAP_ECO_ID, BITMAP_ECO1_ID);
    high_light_1_2.setUpdateTicksInterval(48);
    high_light_1_2.startAnimation(false, true, true);
    add(high_light_1_2);

    high_light_2.setXY(591, 98);
    high_light_2.setBitmaps(BITMAP_RIGHT_ID, BITMAP_RIGHT1_ID);
    high_light_2.setUpdateTicksInterval(48);
    high_light_2.startAnimation(false, true, true);
    add(high_light_2);

    digitalClock1.setPosition(339, 80, 122, 36);
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HGVK));
    digitalClock1.displayLeadingZeroForHourIndicator(true);
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_12_HOUR_NO_SECONDS);
    digitalClock1.setTime12Hour(10, 10, 0, true);
    add(digitalClock1);

    Mode.setPosition(414, 342, 95, 49);
    Mode.setColor(touchgfx::Color::getColorFromRGB(255, 252, 252));
    Mode.setLinespacing(0);
    Mode.setTypedText(touchgfx::TypedText(T___SINGLEUSE_D5PI));
    add(Mode);

    Gear.setXY(327, 342);
    Gear.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Gear.setLinespacing(0);
    Gear.setTypedText(touchgfx::TypedText(T___SINGLEUSE_36NL));
    add(Gear);
}

ClusterViewBase::~ClusterViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void ClusterViewBase::setupScreen()
{
    transitionBegins();
}

void ClusterViewBase::transitionBegins()
{
    //Set_Speed_Gauge_0
    //When screen transition begins update value Speed_Gauge
    //Update value Speed_Gauge over 5000ms time
    Speed_Gauge.updateValue(0, 300);
    Speed_Gauge.setValueUpdatedAction(set_Speed_Gauge_0EndedCallback);

    //Change_speed_Test_0
    //When screen transition begins update value Speed_value
    //Update value Speed_value over 5000ms time
    Speed_value.updateValue(0, 300);
    Speed_value.setValueUpdatedAction(change_speed_Test_0EndedCallback);

    //Update_power_value_0
    //When screen transition begins update value Power_value
    //Update value Power_value over 5000ms time
    Power_value.updateValue(0, 300);
    Power_value.setValueUpdatedAction(update_power_value_0EndedCallback);

    //Update_power_gauge_0
    //When screen transition begins update value Power_guage
    //Update value Power_guage over 5000ms time
    Power_guage.updateValue(0, 300);
    Power_guage.setValueUpdatedAction(update_power_gauge_0EndedCallback);

    //WAIT
    //When screen transition begins delay
    //Delay for 2000 ms (120 Ticks)
    wAITCounter = WAIT_DURATION;

    //SEt_normal
    //When screen transition begins set text Mode
    //Set Mode text to Resource: __SingleUse_ZGD9
    Mode.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZGD9));
    Mode.invalidate();

    //WAIT_NORMAL
    //When SEt_normal completed delay
    //Delay for 2000 ms (120 Ticks)
    wAIT_NORMALCounter = WAIT_NORMAL_DURATION;

    //Hide_Red
    //When screen transition begins hide red
    //Hide red
    red.setVisible(false);
    red.invalidate();

    //HIDE_GREEN
    //When screen transition begins hide Neon_Green
    //Hide Neon_Green
    Neon_Green.setVisible(false);
    Neon_Green.invalidate();
}

void ClusterViewBase::set_Speed_Gauge_0EndedCallbackHandler(const AbstractProgressIndicator& comp)
{
    //Set_Speed_gauge_100
    //When Set_Speed_Gauge_0 completed update value Speed_Gauge
    //Update value Speed_Gauge over 6000ms time
    Speed_Gauge.updateValue(100, 360);
}

void ClusterViewBase::change_speed_Test_0EndedCallbackHandler(const AbstractProgressIndicator& comp)
{
    //Set_speed_value_100
    //When Change_speed_Test_0 completed update value Speed_value
    //Update value Speed_value over 6000ms time
    Speed_value.updateValue(100, 360);
}

void ClusterViewBase::update_power_value_0EndedCallbackHandler(const AbstractProgressIndicator& comp)
{
    //Change_power_value_100
    //When Update_power_value_0 completed update value Power_value
    //Update value Power_value over 6000ms time
    Power_value.updateValue(100, 360);
}

void ClusterViewBase::update_power_gauge_0EndedCallbackHandler(const AbstractProgressIndicator& comp)
{
    //Update_power_gauge_100
    //When Update_power_gauge_0 completed update value Power_guage
    //Update value Power_guage over 6000ms time
    Power_guage.updateValue(100, 360);
}

void ClusterViewBase::handleTickEvent()
{
    if (wAITCounter > 0)
    {
        wAITCounter--;
        if (wAITCounter == 0)
        {
                //Set_Gear_R
                //When WAIT completed set text Gear
                //Set Gear text to Resource: R
                Gear.setTypedText(touchgfx::TypedText(T_R));
                Gear.invalidate();
                Gear.resizeToCurrentText();
                Gear.invalidate();
            
                //wait2
                //When Set_Gear_R completed delay
                //Delay for 2000 ms (120 Ticks)
                wait2Counter = WAIT2_DURATION;
        }
    }

    if (wait2Counter > 0)
    {
        wait2Counter--;
        if (wait2Counter == 0)
        {
                //Set_Gear_N
                //When wait2 completed set text Gear
                //Set Gear text to Resource: N
                Gear.setTypedText(touchgfx::TypedText(T_N));
                Gear.invalidate();
                Gear.resizeToCurrentText();
                Gear.invalidate();
            
                //Wait_3
                //When Set_Gear_N completed delay
                //Delay for 2000 ms (120 Ticks)
                wait_3Counter = WAIT_3_DURATION;
        }
    }

    if (wait_3Counter > 0)
    {
        wait_3Counter--;
        if (wait_3Counter == 0)
        {
                //Set_GEAR_D
                //When Wait_3 completed set text Gear
                //Set Gear text to Resource: D
                Gear.setTypedText(touchgfx::TypedText(T_D));
                Gear.invalidate();
                Gear.resizeToCurrentText();
                Gear.invalidate();
        }
    }

    if (wAIT_NORMALCounter > 0)
    {
        wAIT_NORMALCounter--;
        if (wAIT_NORMALCounter == 0)
        {
                //SET_ECO
                //When WAIT_NORMAL completed set text Mode
                //Set Mode text to Resource: __SingleUse_FS5N
                Mode.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FS5N));
                Mode.invalidate();
            
                //SHOW_GREEN
                //When SET_ECO completed show Neon_Green
                //Show Neon_Green
                Neon_Green.setVisible(true);
                Neon_Green.invalidate();
            
                //WAIT_ECO
                //When SHOW_GREEN completed delay
                //Delay for 2000 ms (120 Ticks)
                wAIT_ECOCounter = WAIT_ECO_DURATION;
        }
    }

    if (wAIT_ECOCounter > 0)
    {
        wAIT_ECOCounter--;
        if (wAIT_ECOCounter == 0)
        {
                //SET_SPORT
                //When WAIT_ECO completed set text Mode
                //Set Mode text to Resource: __SingleUse_V7R8
                Mode.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V7R8));
                Mode.invalidate();
            
                //HIDE_GREEN_2
                //When SET_SPORT completed hide Neon_Green
                //Hide Neon_Green
                Neon_Green.setVisible(false);
                Neon_Green.invalidate();
            
                //SHOW_RED
                //When HIDE_GREEN_2 completed show red
                //Show red
                red.setVisible(true);
                red.invalidate();
        }
    }
}
