/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CLUSTERVIEWBASE_HPP
#define CLUSTERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/cluster_screen/ClusterPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/containers/progress_indicators/TextProgress.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/AnimatedImage.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>

class ClusterViewBase : public touchgfx::View<ClusterPresenter>
{
public:
    ClusterViewBase();
    virtual ~ClusterViewBase();
    virtual void setupScreen();
    virtual void transitionBegins();
    virtual void handleTickEvent();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image Background;
    touchgfx::Image Neon_Green;
    touchgfx::Image red;
    touchgfx::Gauge Speed_Gauge;
    touchgfx::PainterRGB565Bitmap Speed_GaugePainter;
    touchgfx::TextProgress Speed_value;
    touchgfx::TextArea KM;
    touchgfx::Gauge Power_guage;
    touchgfx::PainterRGB565Bitmap Power_guagePainter;
    touchgfx::TextProgress Power_value;
    touchgfx::TextArea KW;
    touchgfx::AnimatedImage lines;
    touchgfx::Image car;
    touchgfx::AnimatedImage high_light;
    touchgfx::AnimatedImage high_light_1;
    touchgfx::AnimatedImage high_light_1_1;
    touchgfx::AnimatedImage high_light_1_1_1;
    touchgfx::AnimatedImage high_light_1_1_1_1;
    touchgfx::AnimatedImage high_light_1_1_2;
    touchgfx::AnimatedImage high_light_1_2;
    touchgfx::AnimatedImage high_light_2;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::TextArea Mode;
    touchgfx::TextArea Gear;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback < ClusterViewBase, const AbstractProgressIndicator& > set_Speed_Gauge_0EndedCallback;
    touchgfx::Callback < ClusterViewBase, const AbstractProgressIndicator& > change_speed_Test_0EndedCallback;
    touchgfx::Callback < ClusterViewBase, const AbstractProgressIndicator& > update_power_value_0EndedCallback;
    touchgfx::Callback < ClusterViewBase, const AbstractProgressIndicator& > update_power_gauge_0EndedCallback;

    /*
     * Callback Handler Declarations
     */
    void set_Speed_Gauge_0EndedCallbackHandler(const AbstractProgressIndicator& comp);
    void change_speed_Test_0EndedCallbackHandler(const AbstractProgressIndicator& comp);
    void update_power_value_0EndedCallbackHandler(const AbstractProgressIndicator& comp);
    void update_power_gauge_0EndedCallbackHandler(const AbstractProgressIndicator& comp);

    /*
     * Delay Variable Declarations
     */
    static const uint16_t WAIT_DURATION = 120;
    uint16_t wAITCounter;
    static const uint16_t WAIT2_DURATION = 120;
    uint16_t wait2Counter;
    static const uint16_t WAIT_3_DURATION = 120;
    uint16_t wait_3Counter;
    static const uint16_t WAIT_NORMAL_DURATION = 120;
    uint16_t wAIT_NORMALCounter;
    static const uint16_t WAIT_ECO_DURATION = 120;
    uint16_t wAIT_ECOCounter;

};

#endif // CLUSTERVIEWBASE_HPP
